# Generated by Django 2.0.2 on 2018-03-08 01:06

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 60 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=60, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(error_messages={'unique': 'A user with the same email already exists.'}, help_text='Required. 60 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=60, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='email address')),
                ('phone', models.CharField(blank=True, error_messages={'unique': 'A user with the phone number already exists.'}, max_length=15, null=True, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='phone')),
                ('nick_name', models.CharField(default='', max_length=50, verbose_name='nick name')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='birthday')),
                ('gender', models.CharField(choices=[('m', 'male'), ('f', 'female')], default='female', max_length=6, verbose_name='gender')),
                ('description', models.CharField(blank=True, max_length=280, null=True, verbose_name='description')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatar/', verbose_name='avatar')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'custom user',
                'verbose_name_plural': 'custom users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BlogArticle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='title')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('content', models.TextField(blank=True, verbose_name='content')),
                ('click_count', models.IntegerField(default=0, verbose_name='click_count')),
                ('like_count', models.IntegerField(default=0, verbose_name='like_count')),
                ('word_count', models.IntegerField(default=0, verbose_name='word count')),
                ('comment_count', models.IntegerField(default=0, verbose_name='comment_count')),
                ('created_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='created time')),
                ('last_modified_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='last modified time')),
                ('top', models.BooleanField(default=False, verbose_name='top')),
                ('is_private', models.BooleanField(default=False, verbose_name='is private')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blogs', to=settings.AUTH_USER_MODEL, to_field='username', verbose_name='author')),
            ],
            options={
                'ordering': ['-top', '-last_modified_time'],
            },
        ),
        migrations.CreateModel(
            name='BlogCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60, verbose_name='category name')),
                ('created_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='created time')),
                ('blog_count', models.IntegerField(default=0, verbose_name='blog count')),
                ('is_deletable', models.BooleanField(default=True, verbose_name='is deletable')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='categories', to=settings.AUTH_USER_MODEL, to_field='username')),
            ],
            options={
                'ordering': ['-created_time'],
            },
        ),
        migrations.CreateModel(
            name='BlogComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('serial_num', models.IntegerField(default=1, verbose_name='serial num')),
                ('created_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='created time')),
                ('like_count', models.IntegerField(default=0, verbose_name='like count')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('is_hot', models.BooleanField(default=False, verbose_name='hot')),
                ('response_serial_num', models.IntegerField(default=0, verbose_name='response serial num')),
                ('response_count', models.IntegerField(default=0, verbose_name='response count')),
                ('blog', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comment', to='app.BlogArticle', verbose_name='blog')),
                ('response_to', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='responses', to='app.BlogComment', verbose_name='reply to')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comment', to=settings.AUTH_USER_MODEL, to_field='username', verbose_name='user')),
            ],
            options={
                'ordering': ['-created_time'],
            },
        ),
        migrations.CreateModel(
            name='BlogTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=66, unique=True, verbose_name='tag name')),
                ('created_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='created time')),
            ],
            options={
                'ordering': ['-created_time'],
            },
        ),
        migrations.CreateModel(
            name='ClickBlog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='created time')),
                ('blog', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='click_blog', to='app.BlogArticle', verbose_name='blog')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='click_blog', to=settings.AUTH_USER_MODEL, to_field='username', verbose_name='user')),
            ],
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='img')),
                ('image_name', models.CharField(max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='LikeBlog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='created time')),
                ('blog', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='like_blog', to='app.BlogArticle', verbose_name='blog')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='like_blog', to=settings.AUTH_USER_MODEL, to_field='username', verbose_name='user')),
            ],
            options={
                'ordering': ['-created_time'],
            },
        ),
        migrations.CreateModel(
            name='LikeComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='created time')),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='like_comment', to='app.BlogComment', verbose_name='comment')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='like_comment', to=settings.AUTH_USER_MODEL, to_field='username', verbose_name='user')),
            ],
            options={
                'ordering': ['-created_time'],
            },
        ),
        migrations.CreateModel(
            name='TaggingBlog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='created time')),
                ('blog', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagging_blog', to='app.BlogArticle', verbose_name='blog')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagging_blog', to='app.BlogTag', verbose_name='tag')),
            ],
            options={
                'ordering': ['-created_time'],
            },
        ),
        migrations.CreateModel(
            name='UserTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='created time')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_tag', to='app.BlogTag', verbose_name='tag')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_tag', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'ordering': ['-created_time'],
            },
        ),
        migrations.AddField(
            model_name='blogtag',
            name='blogs',
            field=models.ManyToManyField(through='app.TaggingBlog', to='app.BlogArticle', verbose_name='blogs'),
        ),
        migrations.AddField(
            model_name='blogtag',
            name='users',
            field=models.ManyToManyField(through='app.UserTag', to=settings.AUTH_USER_MODEL, verbose_name='users'),
        ),
        migrations.AddField(
            model_name='blogarticle',
            name='category',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='blogs', to='app.BlogCategory', verbose_name='category'),
        ),
        migrations.AddField(
            model_name='blogarticle',
            name='tags',
            field=models.ManyToManyField(through='app.TaggingBlog', to='app.BlogTag', verbose_name='tags'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='tags',
            field=models.ManyToManyField(through='app.UserTag', to='app.BlogTag', verbose_name='tags'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='usertag',
            unique_together={('tag', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='taggingblog',
            unique_together={('tag', 'blog')},
        ),
        migrations.AlterUniqueTogether(
            name='likecomment',
            unique_together={('user', 'comment')},
        ),
        migrations.AlterUniqueTogether(
            name='likeblog',
            unique_together={('user', 'blog')},
        ),
        migrations.AlterUniqueTogether(
            name='blogcategory',
            unique_together={('name', 'user')},
        ),
    ]
